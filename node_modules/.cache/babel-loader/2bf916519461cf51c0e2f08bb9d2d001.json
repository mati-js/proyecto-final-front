{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _globalHistory$state, _globalHistory$state2;\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state = globalHistory.state) == null ? void 0 : _globalHistory$state.usr) || null, ((_globalHistory$state2 = globalHistory.state) == null ? void 0 : _globalHistory$state2.key) || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _globalHistory$state3, _globalHistory$state4;\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state3 = globalHistory.state) == null ? void 0 : _globalHistory$state3.usr) || null, ((_globalHistory$state4 = globalHistory.state) == null ? void 0 : _globalHistory$state4.key) || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to == null ? void 0 : to.key) || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {})); // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    var dataRoute = _extends({}, route, {\n      id: id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n    return dataRoute;\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    :\n    // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref11.pathname,\n    _ref11$search = _ref11.search,\n    search = _ref11$search === void 0 ? \"\" : _ref11$search,\n    _ref11$hash = _ref11.hash,\n    hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n        key = _ref12[0],\n        value = _ref12[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      var _this$subscriber2;\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeys.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        var _this$subscriber;\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        (_this$subscriber = this.subscriber) == null ? void 0 : _this$subscriber.call(this, false);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      (_this$subscriber2 = this.subscriber) == null ? void 0 : _this$subscriber2.call(this, false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n      var _this$subscriber3;\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      (_this$subscriber3 = this.subscriber) == null ? void 0 : _this$subscriber3.call(this, true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this4 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n                onAbort = function onAbort() {\n                  return _this4.cancel();\n                };\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this4.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n                    if (aborted || _this4.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n              case 6:\n                aborted = _context.sent;\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n          key = _ref13[0],\n          value = _ref13[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data) {\n  _classCallCheck(this, ErrorResponse);\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.data = data;\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var _init$hydrationData, _init$hydrationData2, _init$hydrationData3;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var _getNotFoundMatches = getNotFoundMatches(dataRoutes),\n      matches = _getNotFoundMatches.matches,\n      route = _getNotFoundMatches.route,\n      error = _getNotFoundMatches.error;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: ((_init$hydrationData = init.hydrationData) == null ? void 0 : _init$hydrationData.loaderData) || {},\n    actionData: ((_init$hydrationData2 = init.hydrationData) == null ? void 0 : _init$hydrationData2.actionData) || null,\n    errors: ((_init$hydrationData3 = init.hydrationData) == null ? void 0 : _init$hydrationData3.errors) || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    var _pendingNavigationCon;\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    (_pendingNavigationCon = pendingNavigationController) == null ? void 0 : _pendingNavigationCon.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              location = createLocation(state.location, path, opts == null ? void 0 : opts.state);\n              historyAction = (opts == null ? void 0 : opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              _context2.next = 9;\n              return startNavigation(historyAction, location, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts == null ? void 0 : opts.replace\n              });\n            case 9:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var _pendingNavigationCon2, loadingNavigation, matches, _getNotFoundMatches2, notFoundMatches, _route, _error, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              (_pendingNavigationCon2 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon2.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts == null ? void 0 : opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts == null ? void 0 : opts.preventScrollReset) === true;\n              loadingNavigation = opts == null ? void 0 : opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n              if (matches) {\n                _context3.next = 13;\n                break;\n              }\n              _getNotFoundMatches2 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches2.matches, _route = _getNotFoundMatches2.route, _error = _getNotFoundMatches2.error; // Cancel all pending deferred on 404s since we don't keep any routes\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n            case 13:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 16;\n                break;\n              }\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n            case 16:\n              // Create a controller/Request for this navigation\n\n              pendingNavigationController = new AbortController();\n              request = createRequest(location, pendingNavigationController.signal, opts == null ? void 0 : opts.submission);\n              if (!(opts != null && opts.pendingError)) {\n                _context3.next = 22;\n                break;\n              }\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 32;\n              break;\n            case 22:\n              if (!(opts != null && opts.submission)) {\n                _context3.next = 32;\n                break;\n              }\n              _context3.next = 25;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n            case 25:\n              actionOutput = _context3.sent;\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 28;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 28:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation;\n            case 32:\n              _context3.next = 34;\n              return handleLoaders(request, location, matches, loadingNavigation, opts == null ? void 0 : opts.submission, opts == null ? void 0 : opts.replace, pendingActionData, pendingError);\n            case 34:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n              if (!shortCircuited) {\n                _context3.next = 40;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 40:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n\n              pendingNavigationController = null;\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors\n              });\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, redirectNavigation, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n              actionMatch = getTargetMatch(matches, location);\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n              result = getMethodNotAllowedResult(location);\n              _context4.next = 13;\n              break;\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch);\n            case 10:\n              result = _context4.sent;\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, result.location)\n              }, submission);\n              _context4.next = 17;\n              return startRedirectNavigation(result, redirectNavigation, opts == null ? void 0 : opts.replace);\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n              if ((opts == null ? void 0 : opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n              return _context4.abrupt(\"return\", {\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n              throw new Error(\"defer() is not supported in actions\");\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, redirectNavigation, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n              if (!loadingNavigation) {\n                navigation = {\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                loadingNavigation = navigation;\n              }\n              _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches != null && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || (matchesToLoad == null ? void 0 : matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                }));\n              }); // Short circuit if we have no loaders to run\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 7;\n                break;\n              }\n              completeNavigation(location, {\n                matches: matches,\n                loaderData: mergeLoaderData(state.loaderData, {}, matches),\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null,\n                actionData: pendingActionData || null\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 7:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _state$fetchers$get;\n                  var _ref14 = _slicedToArray(_ref2, 1),\n                    key = _ref14[0];\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: (_state$fetchers$get = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                updateState(_extends({\n                  navigation: loadingNavigation,\n                  actionData: pendingActionData || state.actionData || null\n                }, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref15 = _slicedToArray(_ref3, 1),\n                  key = _ref15[0];\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 12;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n            case 12:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n              if (!request.signal.aborted) {\n                _context5.next = 18;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 18:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref16 = _slicedToArray(_ref4, 1),\n                  key = _ref16[0];\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n              redirect = findRedirect(results);\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context5.next = 24;\n              return startRedirectNavigation(redirect, redirectNavigation, replace);\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, submission) {\n      var _state$fetchers$get2, _getMethodNotAllowedR, _error2, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, redirectNavigation, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads, _pendingNavigationCon3;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n              _getMethodNotAllowedR = getMethodNotAllowedResult(path), _error2 = _getMethodNotAllowedR.error;\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n            case 6:\n              // Put this fetcher into it's submitting state\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: ((_state$fetchers$get2 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get2.data) || undefined\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 14;\n              return callLoaderOrAction(\"action\", fetchRequest, match);\n            case 14:\n              actionResult = _context6.sent;\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 18;\n                break;\n              }\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              return _context6.abrupt(\"return\");\n            case 18:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 28;\n                break;\n              }\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              redirectNavigation = _extends({\n                state: \"loading\",\n                location: createLocation(state.location, actionResult.location)\n              }, submission);\n              _context6.next = 27;\n              return startRedirectNavigation(actionResult, redirectNavigation);\n            case 27:\n              return _context6.abrupt(\"return\");\n            case 28:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n            case 31:\n              if (isDeferredResult(actionResult)) {\n                invariant(false, \"defer() is not supported in actions\");\n              } // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createRequest(nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n              // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref17 = _slicedToArray(_ref5, 1),\n                  staleKey = _ref17[0];\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _state$fetchers$get3;\n                var _ref18 = _slicedToArray(_ref6, 1),\n                  staleKey = _ref18[0];\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: (_state$fetchers$get3 = state.fetchers.get(staleKey)) == null ? void 0 : _state$fetchers$get3.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 45;\n              return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n            case 45:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n              if (!abortController.signal.aborted) {\n                _context6.next = 51;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 51:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref19 = _slicedToArray(_ref7, 1),\n                  staleKey = _ref19[0];\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n              if (!redirect) {\n                _context6.next = 60;\n                break;\n              }\n              redirectNavigation = getLoaderRedirect(state, redirect);\n              _context6.next = 59;\n              return startRedirectNavigation(redirect, redirectNavigation);\n            case 59:\n              return _context6.abrupt(\"return\");\n            case 60:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                (_pendingNavigationCon3 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon3.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n            case 65:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x25, _x26, _x27, _x28) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match) {\n      var _state$fetchers$get4, loadingFetcher, abortController, fetchRequest, result, redirectNavigation, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              // Put this fetcher into it's loading state\n              loadingFetcher = {\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                data: ((_state$fetchers$get4 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get4.data) || undefined\n              };\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n              abortController = new AbortController();\n              fetchRequest = createRequest(path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 8;\n              return callLoaderOrAction(\"loader\", fetchRequest, match);\n            case 8:\n              result = _context7.sent;\n              if (!isDeferredResult(result)) {\n                _context7.next = 16;\n                break;\n              }\n              _context7.next = 12;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n            case 12:\n              _context7.t0 = _context7.sent;\n              if (_context7.t0) {\n                _context7.next = 15;\n                break;\n              }\n              _context7.t0 = result;\n            case 15:\n              result = _context7.t0;\n            case 16:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 19;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 19:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n              redirectNavigation = getLoaderRedirect(state, result);\n              _context7.next = 23;\n              return startRedirectNavigation(result, redirectNavigation);\n            case 23:\n              return _context7.abrupt(\"return\");\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x29, _x30, _x31) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(redirect, navigation, replace) {\n      var redirectHistoryAction;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n              invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n              _context8.next = 6;\n              return startNavigation(redirectHistoryAction, navigation.location, {\n                overrideNavigation: navigation\n              });\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x32, _x33, _x34, _x35) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref20 = _slicedToArray(_ref8, 3),\n                  href = _ref20[1],\n                  match = _ref20[2];\n                return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n              }))));\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref21 = _slicedToArray(_ref9, 3),\n                  match = _ref21[2];\n                return match;\n              }), fetcherResults, request.signal, true)]);\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n          key = _step3$value[0],\n          id = _step3$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    createHref: createHref,\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  function query(_x36) {\n    return _query.apply(this, arguments);\n  }\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request) {\n      var _yield$queryImpl, location, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return queryImpl(request);\n            case 2:\n              _yield$queryImpl = _context10.sent;\n              location = _yield$queryImpl.location;\n              result = _yield$queryImpl.result;\n              if (!(result instanceof Response)) {\n                _context10.next = 7;\n                break;\n              }\n              return _context10.abrupt(\"return\", result);\n            case 7:\n              return _context10.abrupt(\"return\", _extends({\n                location: location\n              }, result));\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x37, _x38) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, routeId) {\n      var _yield$queryImpl2, result, routeData, value;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return queryImpl(request, routeId);\n            case 2:\n              _yield$queryImpl2 = _context11.sent;\n              result = _yield$queryImpl2.result;\n              if (!(result instanceof Response)) {\n                _context11.next = 6;\n                break;\n              }\n              return _context11.abrupt(\"return\", result);\n            case 6:\n              // Pick off the right state value to return\n              routeData = [result.errors, result.actionData, result.loaderData].find(function (v) {\n                return v;\n              });\n              value = Object.values(routeData || {})[0];\n              if (!isRouteErrorResponse(value)) {\n                _context11.next = 10;\n                break;\n              }\n              return _context11.abrupt(\"return\", new Response(value.data, {\n                status: value.status,\n                statusText: value.statusText\n              }));\n            case 10:\n              return _context11.abrupt(\"return\", value);\n            case 11:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x39, _x40) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, routeId) {\n      var _matchRequest, location, matches, shortCircuitState, _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _matchRequest = matchRequest(request, routeId), location = _matchRequest.location, matches = _matchRequest.matches, shortCircuitState = _matchRequest.shortCircuitState;\n              _context12.prev = 3;\n              if (!shortCircuitState) {\n                _context12.next = 6;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: shortCircuitState\n              });\n            case 6:\n              if (!(request.method !== \"GET\")) {\n                _context12.next = 11;\n                break;\n              }\n              _context12.next = 9;\n              return submit(request, matches, getTargetMatch(matches, location), routeId != null);\n            case 9:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _result\n              });\n            case 11:\n              _context12.next = 13;\n              return loadRouteData(request, matches, routeId != null);\n            case 13:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _extends({}, result, {\n                  actionData: null,\n                  actionHeaders: {}\n                })\n              });\n            case 17:\n              _context12.prev = 17;\n              _context12.t0 = _context12[\"catch\"](3);\n              if (!(_context12.t0 instanceof Response)) {\n                _context12.next = 21;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                location: location,\n                result: _context12.t0\n              });\n            case 21:\n              throw _context12.t0;\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[3, 17]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x41, _x42, _x43, _x44) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, isRouteRequest) {\n      var result, href, method, boundaryMatch, _boundaryMatch, _context13, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 5;\n                break;\n              }\n              href = createHref(new URL(request.url));\n              result = getMethodNotAllowedResult(href);\n              _context14.next = 11;\n              break;\n            case 5:\n              _context14.next = 7;\n              return callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n            case 7:\n              result = _context14.sent;\n              if (!request.signal.aborted) {\n                _context14.next = 11;\n                break;\n              }\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n            case 11:\n              if (!isRedirectResult(result)) {\n                _context14.next = 13;\n                break;\n              }\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n            case 13:\n              if (!isDeferredResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n              throw new Error(\"defer() is not supported in actions\");\n            case 15:\n              if (!isRouteRequest) {\n                _context14.next = 20;\n                break;\n              }\n              if (!isErrorResult(result)) {\n                _context14.next = 19;\n                break;\n              }\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error),\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 500,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n            case 19:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n            case 20:\n              if (!isErrorResult(result)) {\n                _context14.next = 26;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              _boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 24;\n              return loadRouteData(request, matches, isRouteRequest, _defineProperty({}, _boundaryMatch.route.id, result.error));\n            case 24:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n            case 26:\n              _context14.next = 28;\n              return loadRouteData(request, matches, isRouteRequest);\n            case 28:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n            case 30:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x45, _x46, _x47, _x48) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, isRouteRequest, pendingActionError) {\n      var matchesToLoad, results, method, context;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 3;\n                break;\n              }\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                loaderData: {},\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {}\n              });\n            case 3:\n              _context15.next = 5;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (m) {\n                return callLoaderOrAction(\"loader\", request, m, true, isRouteRequest);\n              })));\n            case 5:\n              results = _context15.sent;\n              if (!request.signal.aborted) {\n                _context15.next = 9;\n                break;\n              }\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n            case 9:\n              // Can't do anything with these without the Remix side of things, so just\n              // cancel them for now\n\n              results.forEach(function (result) {\n                if (isDeferredResult(result)) {\n                  result.deferredData.cancel();\n                }\n              }); // Process and commit output from loaders\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches\n              }));\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  function matchRequest(req, routeId) {\n    var url = new URL(req.url);\n    var location = createLocation(\"\", createPath(url), null, \"default\");\n    var matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter(function (m) {\n        return m.route.id === routeId;\n      });\n    } // Short circuit with a 404 if we match nothing\n\n    if (!matches) {\n      var _getNotFoundMatches3 = getNotFoundMatches(dataRoutes),\n        notFoundMatches = _getNotFoundMatches3.matches,\n        route = _getNotFoundMatches3.route,\n        error = _getNotFoundMatches3.error;\n      return {\n        location: location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: _defineProperty({}, route.id, error),\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n    return {\n      location: location,\n      matches: matches\n    };\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts) {\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path: path\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: (opts == null ? void 0 : opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n  if (!opts.formData) {\n    return {\n      path: path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n}\nfunction getLoaderRedirect(state, redirect) {\n  var _state$navigation = state.navigation,\n    formMethod = _state$navigation.formMethod,\n    formAction = _state$navigation.formAction,\n    formEncType = _state$navigation.formEncType,\n    formData = _state$navigation.formData;\n  var navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n    // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches == null ? void 0 : fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref24 = _slicedToArray(_ref10, 2),\n      href = _ref24[0],\n      match = _ref24[1];\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var _currentMatch$route$p;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    ((_currentMatch$route$p = currentMatch.route.path) == null ? void 0 : _currentMatch$route$p.endsWith(\"*\")) && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x49, _x50, _x51, _x52, _x53) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, skipRedirects, isRouteRequest) {\n    var resultType, result, reject, abortPromise, onReject, handler, _result$headers$get, status, location, data;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (skipRedirects === void 0) {\n              skipRedirects = false;\n            }\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n            onReject = function onReject() {\n              return reject();\n            };\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 5;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 10;\n            return Promise.race([handler({\n              request: request,\n              params: match.params\n            }), abortPromise]);\n          case 10:\n            result = _context16.sent;\n            _context16.next = 17;\n            break;\n          case 13:\n            _context16.prev = 13;\n            _context16.t0 = _context16[\"catch\"](5);\n            resultType = ResultType.error;\n            result = _context16.t0;\n          case 17:\n            _context16.prev = 17;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(17);\n          case 20:\n            if (!(result instanceof Response)) {\n              _context16.next = 41;\n              break;\n            }\n            // Process redirects\n            status = result.status;\n            location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n            // without unwrapping\n            if (!isRouteRequest) {\n              _context16.next = 25;\n              break;\n            }\n            throw result;\n          case 25:\n            if (!(status >= 300 && status <= 399 && location != null)) {\n              _context16.next = 29;\n              break;\n            }\n            if (!skipRedirects) {\n              _context16.next = 28;\n              break;\n            }\n            throw result;\n          case 28:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n          case 29:\n            if (!((_result$headers$get = result.headers.get(\"Content-Type\")) != null && _result$headers$get.startsWith(\"application/json\"))) {\n              _context16.next = 35;\n              break;\n            }\n            _context16.next = 32;\n            return result.json();\n          case 32:\n            data = _context16.sent;\n            _context16.next = 38;\n            break;\n          case 35:\n            _context16.next = 37;\n            return result.text();\n          case 37:\n            data = _context16.sent;\n          case 38:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 40;\n              break;\n            }\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n          case 40:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n          case 41:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 43;\n              break;\n            }\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n          case 43:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 45;\n              break;\n            }\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n          case 45:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n          case 46:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[5, 13, 17, 20]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createRequest(location, signal, submission) {\n  var url = createURL(location).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n        key = _step4$value[0],\n        value = _step4$value[1];\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds == null ? void 0 : activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n      key = _revalidatingFetchers[0],\n      match = _revalidatingFetchers[2];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var _errors;\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!((_errors = errors) != null && _errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(function (match) {\n    var id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || r.path === \"\" || r.path === \"/\";\n  }) || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\nfunction getMethodNotAllowedResult(path) {\n  var href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result == null ? void 0 : result.type) === ResultType.redirect;\n}\nfunction resolveDeferredResults(_x54, _x55, _x56, _x57, _x58, _x59) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime().wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData == null ? void 0 : currentLoaderData[match.route.id]) !== undefined;\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x60, _x61, _x62) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n          case 3:\n            aborted = _context19.sent;\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n            return _context19.abrupt(\"return\");\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\nfunction createURL(location) {\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  var href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","id","join","invariant","has","add","dataRoute","children","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","handleLoaders","actionMatch","getTargetMatch","result","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","getMatchesToLoad","matchesToLoad","revalidatingFetchers","routeId","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","_extends","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","fetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","routeData","find","values","method","matchRequest","shortCircuitState","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","searchParams","convertFormDataToSearchParams","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","onReject","handler","resultType","_result$headers$get","text","deferred","toUpperCase","body","Request","URLSearchParams","append","foundError","_errors","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isFetcher","isRevalidatingLoader","unwrap","resolveData","unwrappedData","hasNakedIndexQuery","getAll","handle","origin"],"sources":["/home/mati/utn-web/reactjs/primerproyecto/node_modules/react-router-dom/node_modules/@remix-run/router/history.ts","/home/mati/utn-web/reactjs/primerproyecto/node_modules/react-router-dom/node_modules/@remix-run/router/utils.ts","/home/mati/utn-web/reactjs/primerproyecto/node_modules/react-router-dom/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface AgnosticRouteObject {\n  caseSensitive?: boolean;\n  children?: AgnosticRouteObject[];\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface AgnosticDataRouteObject extends AgnosticRouteObject {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n}\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: AgnosticDataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.subscriber?.(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.subscriber?.(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController?.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = opts?.preventScrollReset === true;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts?.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts?.submission,\n      opts?.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation, opts?.replace);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if (opts?.replace !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !matches?.some((m) => m.route.id === routeId) ||\n        matchesToLoad?.some((m) => m.route.id === routeId)\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(staleKey)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.errors, result.actionData, result.loaderData].find(\n      (v) => v\n    );\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches?.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds?.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      currentLoaderData?.[match.route.id] !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}