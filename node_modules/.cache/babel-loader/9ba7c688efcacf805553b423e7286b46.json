{"ast":null,"code":"import _slicedToArray from\"/home/mati/utn-web/reactjs/primerproyecto/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import{Input,Button}from'antd';import{CheckOutlined,CloseCircleOutlined}from'@ant-design/icons';import'../styles/task.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Task=function Task(_ref){var taskId=_ref.taskId,onDestroy=_ref.onDestroy;// Cuando una tarea se completa, se bloquea\n// el input y se pone verde el fondo.\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isDone=_useState2[0],setDone=_useState2[1];// Cuando una tarea se cancela, se bloquea\n// el input y se pone rojo el fondo.\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCancelled=_useState4[0],setCancelled=_useState4[1];// Setea la tarea como no-cancelada\n// (esto evita que el estado anterior\n// se mantenga) y setea el estado contrario\nvar handleDoneTask=function handleDoneTask(){setCancelled(false);setDone(!isDone);};// Lo mismo acá\nvar handleCancelledTask=function handleCancelledTask(){setDone(false);setCancelled(!isCancelled);};// Acá llamo la función que le pasé\n// como un prop. Al usar el hook \n// {useEffect}, la lista está actualizada\nvar handleDestroy=function handleDestroy(){onDestroy(taskId);};var setCorrectBackground=function setCorrectBackground(){return{background:\"\".concat(isDone?'#00a362':isCancelled?'#a12a2a':'black')};};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",style:setCorrectBackground(),children:[/*#__PURE__*/_jsx(Input,{className:\"text\",style:isDone||isCancelled?{textDecoration:'line-through'}:{textDecoration:'none'},placeholder:\"Editame\",bordered:false,disabled:isDone||isCancelled}),/*#__PURE__*/_jsx(Button,{className:\"complete\",onClick:handleDoneTask,size:\"middle\",icon:/*#__PURE__*/_jsx(CheckOutlined,{})}),/*#__PURE__*/_jsx(Button,{className:\"cancel\",onClick:isCancelled?handleDestroy:handleCancelledTask,size:\"middle\",icon:/*#__PURE__*/_jsx(CloseCircleOutlined,{})})]});};export default Task;","map":{"version":3,"names":["useState","Input","Button","CheckOutlined","CloseCircleOutlined","Task","taskId","onDestroy","isDone","setDone","isCancelled","setCancelled","handleDoneTask","handleCancelledTask","handleDestroy","setCorrectBackground","background","textDecoration"],"sources":["/home/mati/utn-web/reactjs/primerproyecto/src/pages/home/components/Task.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Input, Button } from 'antd';\nimport { CheckOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport '../styles/task.css';\n\nconst Task = ({ taskId, onDestroy }) => {\n  // Cuando una tarea se completa, se bloquea\n  // el input y se pone verde el fondo.\n  const [isDone, setDone] = useState(false);\n\n  // Cuando una tarea se cancela, se bloquea\n  // el input y se pone rojo el fondo.\n  const [isCancelled, setCancelled] = useState(false);\n\n  // Setea la tarea como no-cancelada\n  // (esto evita que el estado anterior\n  // se mantenga) y setea el estado contrario\n  const handleDoneTask = () => {\n    setCancelled(false);\n    setDone(!isDone);\n  };\n\n  // Lo mismo acá\n  const handleCancelledTask = () => {\n    setDone(false);\n    setCancelled(!isCancelled);\n  };\n\n  // Acá llamo la función que le pasé\n  // como un prop. Al usar el hook \n  // {useEffect}, la lista está actualizada\n  const handleDestroy = () => {\n    onDestroy(taskId);\n  }\n\n  const setCorrectBackground = () => {\n    return {\n      background: `${isDone ? '#00a362' : isCancelled ? '#a12a2a' : 'black'}`\n    };\n  };\n\n  return (\n    <div className='container' style={setCorrectBackground()}>\n      <Input className='text' style={isDone || isCancelled ? {textDecoration: 'line-through'} : {textDecoration: 'none'}} placeholder='Editame' bordered={false} disabled={isDone || isCancelled}/>\n      <Button className='complete' onClick={handleDoneTask} size='middle' icon={ <CheckOutlined/> }/>\n      <Button className='cancel' onClick={isCancelled ? handleDestroy : handleCancelledTask} size='middle' icon={ <CloseCircleOutlined /> }/>\n    </div>\n  );\n};\n\nexport default Task;"],"mappings":"+HAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,KAAK,CAAEC,MAAM,KAAQ,MAAM,CACpC,OAASC,aAAa,CAAEC,mBAAmB,KAAQ,mBAAmB,CACtE,MAAO,oBAAoB,CAAC,wFAE5B,GAAMC,KAAI,CAAG,QAAPA,KAAI,MAA8B,IAAxBC,OAAM,MAANA,MAAM,CAAEC,SAAS,MAATA,SAAS,CAC/B;AACA;AACA,cAA0BP,QAAQ,CAAC,KAAK,CAAC,wCAAlCQ,MAAM,eAAEC,OAAO,eAEtB;AACA;AACA,eAAoCT,QAAQ,CAAC,KAAK,CAAC,yCAA5CU,WAAW,eAAEC,YAAY,eAEhC;AACA;AACA;AACA,GAAMC,eAAc,CAAG,QAAjBA,eAAc,EAAS,CAC3BD,YAAY,CAAC,KAAK,CAAC,CACnBF,OAAO,CAAC,CAACD,MAAM,CAAC,CAClB,CAAC,CAED;AACA,GAAMK,oBAAmB,CAAG,QAAtBA,oBAAmB,EAAS,CAChCJ,OAAO,CAAC,KAAK,CAAC,CACdE,YAAY,CAAC,CAACD,WAAW,CAAC,CAC5B,CAAC,CAED;AACA;AACA;AACA,GAAMI,cAAa,CAAG,QAAhBA,cAAa,EAAS,CAC1BP,SAAS,CAACD,MAAM,CAAC,CACnB,CAAC,CAED,GAAMS,qBAAoB,CAAG,QAAvBA,qBAAoB,EAAS,CACjC,MAAO,CACLC,UAAU,WAAKR,MAAM,CAAG,SAAS,CAAGE,WAAW,CAAG,SAAS,CAAG,OAAO,CACvE,CAAC,CACH,CAAC,CAED,mBACE,aAAK,SAAS,CAAC,WAAW,CAAC,KAAK,CAAEK,oBAAoB,EAAG,wBACvD,KAAC,KAAK,EAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAEP,MAAM,EAAIE,WAAW,CAAG,CAACO,cAAc,CAAE,cAAc,CAAC,CAAG,CAACA,cAAc,CAAE,MAAM,CAAE,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAE,KAAM,CAAC,QAAQ,CAAET,MAAM,EAAIE,WAAY,EAAE,cAC7L,KAAC,MAAM,EAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAEE,cAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAG,KAAC,aAAa,IAAI,EAAE,cAC/F,KAAC,MAAM,EAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAEF,WAAW,CAAGI,aAAa,CAAGD,mBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAG,KAAC,mBAAmB,IAAK,EAAE,GACnI,CAEV,CAAC,CAED,cAAeR,KAAI"},"metadata":{},"sourceType":"module"}