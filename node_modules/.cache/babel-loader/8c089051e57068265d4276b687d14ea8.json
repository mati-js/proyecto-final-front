{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mati\\\\Desktop\\\\proyecto-final-front\\\\src\\\\pages\\\\home\\\\components\\\\Task.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport { Input, Button } from 'antd';\nimport { CheckOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport '../styles/task.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = _ref => {\n  _s();\n  let {\n    taskId,\n    onDestroy\n  } = _ref;\n  // Cuando una tarea se completa, se bloquea\n  // el input y se pone verde el fondo.\n  const [isDone, setDone] = useState(false);\n\n  // Cuando una tarea se cancela, se bloquea\n  // el input y se pone rojo el fondo.\n  const [isCancelled, setCancelled] = useState(false);\n  const thisTask = useRef(null);\n\n  // Setea la tarea como no-cancelada\n  // (esto evita que el estado anterior\n  // se mantenga) y setea el estado contrario\n  const handleDoneTask = () => {\n    setCancelled(false);\n    setDone(!isDone);\n    setTimeout(() => {});\n    isDone ? thisTask.current.classList.add('completed-task') : thisTask.current.classList.remove('completed-task');\n  };\n\n  // Lo mismo acá\n  const handleCancelledTask = () => {\n    setDone(false);\n    setCancelled(!isCancelled);\n  };\n\n  // Acá le puse una animación y le\n  // pongo un timeout para que espere\n  // que termine y luego, llamo la función\n  // que le pasé como un prop. Al usar el hook \n  // {useEffect}, la lista de tareas está actualizada\n  const handleDestroy = () => {\n    thisTask.current.classList.add('deleted-task');\n    setTimeout(() => {\n      onDestroy(taskId);\n    }, 300); // 300 ms es justo lo que dura la animación\n  };\n\n  const setCorrectBackground = () => {\n    return {\n      background: `${isDone ? '#00a362' : isCancelled ? '#a12a2a' : 'black'}`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: thisTask,\n    className: \"container\",\n    style: setCorrectBackground(),\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      className: \"text\",\n      style: isDone || isCancelled ? {\n        textDecoration: 'line-through'\n      } : {\n        textDecoration: 'none'\n      },\n      placeholder: \"Editame\",\n      bordered: false,\n      disabled: isDone || isCancelled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"complete\",\n      onClick: handleDoneTask,\n      size: \"middle\",\n      icon: /*#__PURE__*/_jsxDEV(CheckOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 82\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"cancel\",\n      onClick: isCancelled ? handleDestroy : handleCancelledTask,\n      size: \"middle\",\n      icon: /*#__PURE__*/_jsxDEV(CloseCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 115\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"PloFxHxwZFmUjRaldmTJtsmnnLk=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["useState","useRef","Input","Button","CheckOutlined","CloseCircleOutlined","Task","taskId","onDestroy","isDone","setDone","isCancelled","setCancelled","thisTask","handleDoneTask","setTimeout","current","classList","add","remove","handleCancelledTask","handleDestroy","setCorrectBackground","background","textDecoration"],"sources":["C:/Users/mati/Desktop/proyecto-final-front/src/pages/home/components/Task.jsx"],"sourcesContent":["import { useState, useRef } from 'react';\r\nimport { Input, Button } from 'antd';\r\nimport { CheckOutlined, CloseCircleOutlined } from '@ant-design/icons';\r\nimport '../styles/task.css';\r\n\r\nconst Task = ({ taskId, onDestroy }) => {\r\n  // Cuando una tarea se completa, se bloquea\r\n  // el input y se pone verde el fondo.\r\n  const [isDone, setDone] = useState(false);\r\n\r\n  // Cuando una tarea se cancela, se bloquea\r\n  // el input y se pone rojo el fondo.\r\n  const [isCancelled, setCancelled] = useState(false);\r\n\r\n  const thisTask = useRef(null);\r\n\r\n  // Setea la tarea como no-cancelada\r\n  // (esto evita que el estado anterior\r\n  // se mantenga) y setea el estado contrario\r\n  const handleDoneTask = () => {\r\n    setCancelled(false);\r\n    setDone(!isDone);\r\n    \r\n    setTimeout(() => {\r\n      \r\n    })\r\n    isDone ? \r\n      thisTask.current.classList.add('completed-task') :\r\n      thisTask.current.classList.remove('completed-task')\r\n  };\r\n\r\n  // Lo mismo acá\r\n  const handleCancelledTask = () => {\r\n    setDone(false);\r\n    setCancelled(!isCancelled);\r\n  };\r\n\r\n  // Acá le puse una animación y le\r\n  // pongo un timeout para que espere\r\n  // que termine y luego, llamo la función\r\n  // que le pasé como un prop. Al usar el hook \r\n  // {useEffect}, la lista de tareas está actualizada\r\n  const handleDestroy = () => {\r\n    thisTask.current.classList.add('deleted-task');\r\n    setTimeout(() => {\r\n      onDestroy(taskId)\r\n    }, 300); // 300 ms es justo lo que dura la animación\r\n  }\r\n\r\n  const setCorrectBackground = () => {\r\n    return {\r\n      background: `${isDone ? '#00a362' : isCancelled ? '#a12a2a' : 'black'}`\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div ref={thisTask} className='container' style={setCorrectBackground()}>\r\n      <Input className='text' style={isDone || isCancelled ? {textDecoration: 'line-through'} : {textDecoration: 'none'}} placeholder='Editame' bordered={false} disabled={isDone || isCancelled}/>\r\n      <Button className='complete' onClick={handleDoneTask} size='middle' icon={ <CheckOutlined/> }/>\r\n      <Button className='cancel' onClick={isCancelled ? handleDestroy : handleCancelledTask} size='middle' icon={ <CloseCircleOutlined /> }/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,SAASC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AACpC,SAASC,aAAa,EAAEC,mBAAmB,QAAQ,mBAAmB;AACtE,OAAO,oBAAoB;AAAC;AAE5B,MAAMC,IAAI,GAAG,QAA2B;EAAA;EAAA,IAA1B;IAAEC,MAAM;IAAEC;EAAU,CAAC;EACjC;EACA;EACA,MAAM,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEzC;EACA;EACA,MAAM,CAACW,WAAW,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMa,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA;EACA;EACA,MAAMa,cAAc,GAAG,MAAM;IAC3BF,YAAY,CAAC,KAAK,CAAC;IACnBF,OAAO,CAAC,CAACD,MAAM,CAAC;IAEhBM,UAAU,CAAC,MAAM,CAEjB,CAAC,CAAC;IACFN,MAAM,GACJI,QAAQ,CAACG,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,gBAAgB,CAAC,GAChDL,QAAQ,CAACG,OAAO,CAACC,SAAS,CAACE,MAAM,CAAC,gBAAgB,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,MAAM;IAChCV,OAAO,CAAC,KAAK,CAAC;IACdE,YAAY,CAAC,CAACD,WAAW,CAAC;EAC5B,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA,MAAMU,aAAa,GAAG,MAAM;IAC1BR,QAAQ,CAACG,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;IAC9CH,UAAU,CAAC,MAAM;MACfP,SAAS,CAACD,MAAM,CAAC;IACnB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;;EAED,MAAMe,oBAAoB,GAAG,MAAM;IACjC,OAAO;MACLC,UAAU,EAAG,GAAEd,MAAM,GAAG,SAAS,GAAGE,WAAW,GAAG,SAAS,GAAG,OAAQ;IACxE,CAAC;EACH,CAAC;EAED,oBACE;IAAK,GAAG,EAAEE,QAAS;IAAC,SAAS,EAAC,WAAW;IAAC,KAAK,EAAES,oBAAoB,EAAG;IAAA,wBACtE,QAAC,KAAK;MAAC,SAAS,EAAC,MAAM;MAAC,KAAK,EAAEb,MAAM,IAAIE,WAAW,GAAG;QAACa,cAAc,EAAE;MAAc,CAAC,GAAG;QAACA,cAAc,EAAE;MAAM,CAAE;MAAC,WAAW,EAAC,SAAS;MAAC,QAAQ,EAAE,KAAM;MAAC,QAAQ,EAAEf,MAAM,IAAIE;IAAY;MAAA;MAAA;MAAA;IAAA,QAAE,eAC7L,QAAC,MAAM;MAAC,SAAS,EAAC,UAAU;MAAC,OAAO,EAAEG,cAAe;MAAC,IAAI,EAAC,QAAQ;MAAC,IAAI,eAAG,QAAC,aAAa;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QAAE,eAC/F,QAAC,MAAM;MAAC,SAAS,EAAC,QAAQ;MAAC,OAAO,EAAEH,WAAW,GAAGU,aAAa,GAAGD,mBAAoB;MAAC,IAAI,EAAC,QAAQ;MAAC,IAAI,eAAG,QAAC,mBAAmB;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACnI;AAEV,CAAC;AAAC,GAzDId,IAAI;AAAA,KAAJA,IAAI;AA2DV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}